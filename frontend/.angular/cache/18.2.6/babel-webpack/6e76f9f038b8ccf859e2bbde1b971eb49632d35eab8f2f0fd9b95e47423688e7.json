{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ProductService = /*#__PURE__*/(() => {\n  class ProductService {\n    httpClient;\n    API_URL = 'http://localhost:9000/api/products';\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n    }\n    getProducts(page = 0, size = 5, sort = 'name', sortDir = 'ASC', category = \"All\", search = \"\") {\n      return this.httpClient.get(`${this.API_URL}/paged?page=${page}&size=${size}&sortBy=${sort}&sortDir=${sortDir}&category=${category}&search=${search}`);\n    }\n    // Updated method to send FormData instead of ProductRequest\n    createProduct(formData) {\n      return this.httpClient.post(this.API_URL, formData).pipe(catchError(this.handleError));\n    }\n    removeProduct(productId) {\n      return this.httpClient.delete(`${this.API_URL}/` + productId).pipe(catchError(this.handleError));\n    }\n    // Method to upload thumbnail if needed separately\n    uploadThumbnail(file, productId) {\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('id', productId);\n      return this.httpClient.post(`${this.API_URL}/thumbnail`, formData, {\n        observe: 'response',\n        // Observe the full response (status, headers, body)\n        responseType: 'text' // Treat response as plain text\n      }).pipe(map(response => response.body),\n      // Extract the body containing the string (URL)\n      catchError(error => {\n        console.error('Thumbnail upload failed', error);\n        return throwError(() => new Error('Something went wrong during thumbnail upload'));\n      }));\n    }\n    // Error handler method\n    handleError(error) {\n      if (error.status === 403) {\n        // Handle the 403 Forbidden error\n        return throwError(() => new Error('You do not have permission to perform this action.'));\n      }\n      // Handle other errors\n      return throwError(() => new Error('Something went wrong'));\n    }\n    static ɵfac = function ProductService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ProductService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ProductService,\n      factory: ProductService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ProductService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}