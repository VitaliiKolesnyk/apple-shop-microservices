{"ast":null,"code":"import { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/web-socket.service\";\nimport * as i2 from \"../services/chat.service\";\nimport * as i3 from \"angular-auth-oidc-client\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@angular/common\";\nfunction ChatComponent_li_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\")(1, \"span\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 1);\n    i0.ɵɵlistener(\"click\", function ChatComponent_li_4_Template_button_click_3_listener() {\n      const session_r2 = i0.ɵɵrestoreView(_r1).$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.openChat(session_r2.id));\n    });\n    i0.ɵɵtext(4, \"Open\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"button\", 1);\n    i0.ɵɵlistener(\"click\", function ChatComponent_li_4_Template_button_click_5_listener() {\n      const session_r2 = i0.ɵɵrestoreView(_r1).$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.endSession(session_r2.id));\n    });\n    i0.ɵɵtext(6, \"End\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const session_r2 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Session ID: \", session_r2.id, \"\");\n  }\n}\nfunction ChatComponent_div_7_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\")(2, \"strong\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const msg_r5 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"\", msg_r5.sender, \":\");\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", msg_r5.content, \"\");\n  }\n}\nfunction ChatComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"h3\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 3);\n    i0.ɵɵtemplate(4, ChatComponent_div_7_div_4_Template, 5, 2, \"div\", 0);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"input\", 4);\n    i0.ɵɵtwoWayListener(\"ngModelChange\", function ChatComponent_div_7_Template_input_ngModelChange_5_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r2 = i0.ɵɵnextContext();\n      i0.ɵɵtwoWayBindingSet(ctx_r2.messageContent, $event) || (ctx_r2.messageContent = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"button\", 1);\n    i0.ɵɵlistener(\"click\", function ChatComponent_div_7_Template_button_click_6_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.sendMessage());\n    });\n    i0.ɵɵtext(7, \"Send\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Chat Session: \", ctx_r2.currentSessionId, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.messages);\n    i0.ɵɵadvance();\n    i0.ɵɵtwoWayProperty(\"ngModel\", ctx_r2.messageContent);\n  }\n}\nexport let ChatComponent = /*#__PURE__*/(() => {\n  class ChatComponent {\n    webSocketService;\n    chatService;\n    oidcSecurityService;\n    sessions = [];\n    currentSessionId = '';\n    messageContent = '';\n    messages = [];\n    messageSubscription;\n    userId = '';\n    constructor(webSocketService, chatService, oidcSecurityService) {\n      this.webSocketService = webSocketService;\n      this.chatService = chatService;\n      this.oidcSecurityService = oidcSecurityService;\n    }\n    ngOnInit() {\n      this.loadUserSessions();\n      this.oidcSecurityService.getAccessToken().subscribe(token => {\n        const userId = this.decodeToken(token);\n      }, error => {\n        console.error('Failed to get access token:', error);\n      });\n    }\n    loadUserSessions() {\n      this.chatService.getUserSessions(this.userId).subscribe(sessions => {\n        this.sessions = sessions;\n      });\n    }\n    openChat(sessionId) {\n      this.currentSessionId = sessionId;\n      this.messages = []; // Reset messages for the new session\n      this.webSocketService.connect(this.currentSessionId);\n      this.messageSubscription = this.webSocketService.onMessageReceived().subscribe(message => {\n        this.messages.push(message);\n      });\n      // Optionally, load messages from the server if needed\n      this.loadMessages(sessionId);\n    }\n    createNewSession() {\n      this.chatService.createSession(this.userId).subscribe(session => {\n        this.currentSessionId = session.id;\n        this.messages = []; // Reset messages for the new session\n        this.webSocketService.connect(this.currentSessionId);\n        this.messageSubscription = this.webSocketService.onMessageReceived().subscribe(message => {\n          this.messages.push(message);\n        });\n      });\n    }\n    sendMessage() {\n      if (this.messageContent.trim() !== '' && this.currentSessionId) {\n        const chatMessage = {\n          sender: 'user',\n          // Replace with dynamic user info\n          content: this.messageContent\n        };\n        this.webSocketService.sendMessage(this.currentSessionId, chatMessage);\n        this.messageContent = '';\n      }\n    }\n    endSession(sessionId) {\n      this.chatService.endSession(sessionId).subscribe(() => {\n        // Clear the current session and messages after ending\n        if (this.currentSessionId === sessionId) {\n          this.currentSessionId = '';\n          this.messages = [];\n          this.webSocketService.disconnect();\n          this.loadUserSessions(); // Refresh session list\n        }\n      });\n    }\n    ngOnDestroy() {\n      if (this.messageSubscription) {\n        this.messageSubscription.unsubscribe();\n      }\n      this.webSocketService.disconnect();\n    }\n    loadMessages(sessionId) {\n      this.chatService.getMessages(sessionId).subscribe(messages => {\n        this.messages = messages;\n      });\n    }\n    // Decode JWT token method\n    decodeToken(token) {\n      try {\n        const base64Url = token.split('.')[1];\n        const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n        const jsonPayload = decodeURIComponent(atob(base64).split('').map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)).join(''));\n        const decoded = JSON.parse(jsonPayload);\n        return decoded.sub || decoded.userId || null; // Adjust according to your JWT structure\n      } catch (error) {\n        console.error('Failed to decode token:', error);\n        return null;\n      }\n    }\n    static ɵfac = function ChatComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ChatComponent)(i0.ɵɵdirectiveInject(i1.WebSocketService), i0.ɵɵdirectiveInject(i2.ChatService), i0.ɵɵdirectiveInject(i3.OidcSecurityService));\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ChatComponent,\n      selectors: [[\"app-chat\"]],\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      decls: 8,\n      vars: 2,\n      consts: [[4, \"ngFor\", \"ngForOf\"], [3, \"click\"], [4, \"ngIf\"], [1, \"messages\"], [\"placeholder\", \"Type a message\", 3, \"ngModelChange\", \"ngModel\"]],\n      template: function ChatComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\")(1, \"h2\");\n          i0.ɵɵtext(2, \"Chat Sessions\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(3, \"ul\");\n          i0.ɵɵtemplate(4, ChatComponent_li_4_Template, 7, 1, \"li\", 0);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"button\", 1);\n          i0.ɵɵlistener(\"click\", function ChatComponent_Template_button_click_5_listener() {\n            return ctx.createNewSession();\n          });\n          i0.ɵɵtext(6, \"Start New Chat\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(7, ChatComponent_div_7_Template, 8, 3, \"div\", 2);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngForOf\", ctx.sessions);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", ctx.currentSessionId);\n        }\n      },\n      dependencies: [FormsModule, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgModel, CommonModule, i5.NgForOf, i5.NgIf],\n      styles: [\".messages[_ngcontent-%COMP%]{max-height:400px;overflow-y:auto;border:1px solid #ccc;margin-bottom:10px;padding:10px}button[_ngcontent-%COMP%]{margin-left:10px}\"]\n    });\n  }\n  return ChatComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}