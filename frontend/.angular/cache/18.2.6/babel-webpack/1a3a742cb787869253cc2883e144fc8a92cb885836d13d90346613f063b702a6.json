{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Vitalii/IdeaProjects/microservices/microservices-shop-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { loadStripe } from '@stripe/stripe-js';\nimport { PopupComponent } from '../popup/popup.component';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nfunction PaymentComponent_span_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Submit Payment\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction PaymentComponent_span_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵelement(1, \"div\", 9);\n    i0.ɵɵtext(2, \" Processing... \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction PaymentComponent_app_popup_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"app-popup\", 10);\n    i0.ɵɵlistener(\"closed\", function PaymentComponent_app_popup_10_Template_app_popup_closed_0_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onClosePopup());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"message\", ctx_r1.paymentMessage);\n  }\n}\nexport let PaymentComponent = /*#__PURE__*/(() => {\n  class PaymentComponent {\n    http;\n    router;\n    cdr;\n    stripe = null;\n    elements = null;\n    card = null;\n    isPaymentProcessing = false;\n    amount;\n    userId;\n    userEmail;\n    orderNumber;\n    paymentMessage = ''; // Message for the popup\n    showPopup = false; // Control popup visibility\n    constructor(http, router, cdr) {\n      this.http = http;\n      this.router = router;\n      this.cdr = cdr;\n      const navigation = this.router.getCurrentNavigation();\n      const state = navigation?.extras.state;\n      this.amount = state?.amount || 0;\n      this.userId = state?.userId || '';\n      this.userEmail = state?.userEmail || '';\n      this.orderNumber = state?.orderNumber || '';\n    }\n    ngOnInit() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        _this.stripe = yield loadStripe('pk_test_51Q9R43LI63ZkzNayLCS4C7vvSJL9R31ans6GcN4m528CXXUTkLaBHY4SIKzTXlzDDC85DGH6nZQWWIJnRkMeZGtI00z5L5xYzI');\n        if (_this.stripe) {\n          _this.elements = _this.stripe.elements();\n          const style = {\n            base: {\n              color: '#32325d',\n              fontFamily: '\"Helvetica Neue\", Helvetica, sans-serif',\n              fontSmoothing: 'antialiased',\n              fontSize: '16px',\n              '::placeholder': {\n                color: '#aab7c4'\n              }\n            },\n            invalid: {\n              color: '#fa755a',\n              iconColor: '#fa755a'\n            }\n          };\n          _this.card = _this.elements.create('card', {\n            style\n          });\n          _this.card.mount('#card-element');\n        } else {\n          console.error('Stripe initialization failed!');\n        }\n      })();\n    }\n    handleSubmit(event) {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        event.preventDefault();\n        _this2.isPaymentProcessing = true;\n        if (!_this2.stripe || !_this2.card) {\n          console.error('Stripe.js has not been initialized.');\n          _this2.isPaymentProcessing = false;\n          return;\n        }\n        const {\n          token,\n          error\n        } = yield _this2.stripe.createToken(_this2.card);\n        if (error) {\n          console.error('Error creating token:', error);\n          _this2.isPaymentProcessing = false;\n          _this2.showPopup = true; // Show popup for failure\n          _this2.paymentMessage = 'Payment failed. Please try again.';\n        } else if (token) {\n          const stripeToken = {\n            token: token.id,\n            success: true\n          };\n          _this2.http.post('http://localhost:9000/api/payments/token', stripeToken).subscribe(response => {\n            if (response.success) {\n              const chargeData = {\n                token: response.token,\n                amount: _this2.amount,\n                customer: _this2.userId,\n                email: _this2.userEmail,\n                orderNumber: _this2.orderNumber\n              };\n              _this2.http.post('http://localhost:9000/api/payments/charge', chargeData).subscribe(() => {\n                _this2.isPaymentProcessing = false;\n                _this2.showPopup = true; // Show popup for success\n                _this2.paymentMessage = 'Payment was successful! Thank you for your order.';\n              }, chargeError => {\n                console.error('Error processing payment:', chargeError);\n                _this2.isPaymentProcessing = false;\n                _this2.showPopup = true; // Show popup for failure\n                _this2.paymentMessage = 'Payment processing failed. Please try again.';\n              });\n            } else {\n              _this2.isPaymentProcessing = false;\n              _this2.showPopup = true; // Show popup for failure\n              _this2.paymentMessage = 'Token processing failed. Please try again.';\n            }\n          }, error => {\n            console.error('Error processing token on backend:', error);\n            _this2.isPaymentProcessing = false;\n            _this2.showPopup = true; // Show popup for failure\n            _this2.paymentMessage = 'Error processing your request. Please try again.';\n          });\n        }\n      })();\n    }\n    onClosePopup() {\n      this.showPopup = false; // Hide popup\n      this.cdr.detectChanges(); // Notify Angular to check for changes\n      // Redirect to the home page after closing the popup\n      this.router.navigate(['/']); // Redirect to home page\n    }\n    static ɵfac = function PaymentComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || PaymentComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: PaymentComponent,\n      selectors: [[\"app-payment\"]],\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      decls: 11,\n      vars: 4,\n      consts: [[1, \"payment-form-container\"], [1, \"payment-form\"], [1, \"form-container\", 3, \"submit\"], [1, \"form-title\"], [\"id\", \"card-element\", 1, \"card-input\"], [\"id\", \"card-errors\", \"role\", \"alert\", 1, \"error-message\"], [1, \"submit-button\", 3, \"disabled\"], [4, \"ngIf\"], [3, \"message\", \"closed\", 4, \"ngIf\"], [1, \"spinner\"], [3, \"closed\", \"message\"]],\n      template: function PaymentComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"form\", 2);\n          i0.ɵɵlistener(\"submit\", function PaymentComponent_Template_form_submit_2_listener($event) {\n            return ctx.handleSubmit($event);\n          });\n          i0.ɵɵelementStart(3, \"h2\", 3);\n          i0.ɵɵtext(4, \"Complete Your Payment\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(5, \"div\", 4)(6, \"div\", 5);\n          i0.ɵɵelementStart(7, \"button\", 6);\n          i0.ɵɵtemplate(8, PaymentComponent_span_8_Template, 2, 0, \"span\", 7)(9, PaymentComponent_span_9_Template, 3, 0, \"span\", 7);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(10, PaymentComponent_app_popup_10_Template, 1, 1, \"app-popup\", 8);\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"disabled\", ctx.isPaymentProcessing);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", !ctx.isPaymentProcessing);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.isPaymentProcessing);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.showPopup);\n        }\n      },\n      dependencies: [PopupComponent, CommonModule, i3.NgIf],\n      styles: [\".payment-form-container[_ngcontent-%COMP%]{display:flex;justify-content:center;align-items:center;height:100vh;background-color:#f8f9fa}.payment-form[_ngcontent-%COMP%]{background-color:#fff;border:1px solid #dee2e6;padding:2rem;border-radius:10px;box-shadow:0 4px 12px #0000001a;width:100%;max-width:400px}.form-container[_ngcontent-%COMP%]{display:flex;flex-direction:column;align-items:center}.form-title[_ngcontent-%COMP%]{font-size:1.75rem;margin-bottom:1.5rem;font-weight:700;color:#212529;text-align:center}.card-input[_ngcontent-%COMP%]{width:100%;padding:12px;border:1px solid #ced4da;border-radius:5px;margin-bottom:1rem;font-size:1rem;background-color:#f8f9fa;color:#212529}.card-input[_ngcontent-%COMP%]:focus{outline:none;border-color:#212529}.error-message[_ngcontent-%COMP%]{color:#dc3545;font-size:.875rem;margin-bottom:1rem;text-align:center}.submit-button[_ngcontent-%COMP%]{background-color:#212529;color:#fff;padding:12px 24px;font-size:1rem;border:none;border-radius:5px;width:100%;cursor:pointer;transition:background-color .3s ease}.submit-button[_ngcontent-%COMP%]:hover{background-color:#343a40}.submit-button[_ngcontent-%COMP%]:disabled{background-color:#6c757d;cursor:not-allowed}.spinner[_ngcontent-%COMP%]{border:4px solid #f3f3f3;border-top:4px solid #212529;border-radius:50%;width:16px;height:16px;animation:_ngcontent-%COMP%_spin 1s linear infinite}@keyframes _ngcontent-%COMP%_spin{0%{transform:rotate(0)}to{transform:rotate(360deg)}}\"]\n    });\n  }\n  return PaymentComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}