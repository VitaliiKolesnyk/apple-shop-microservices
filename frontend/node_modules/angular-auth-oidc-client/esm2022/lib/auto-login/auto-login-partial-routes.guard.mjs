import { Injectable, inject } from '@angular/core';
import { Router, } from '@angular/router';
import { map } from 'rxjs/operators';
import { AuthStateService } from '../auth-state/auth-state.service';
import { ConfigurationService } from '../config/config.service';
import { LoginService } from '../login/login.service';
import { AutoLoginService } from './auto-login.service';
import * as i0 from "@angular/core";
export class AutoLoginPartialRoutesGuard {
    constructor() {
        this.autoLoginService = inject(AutoLoginService);
        this.authStateService = inject(AuthStateService);
        this.loginService = inject(LoginService);
        this.configurationService = inject(ConfigurationService);
        this.router = inject(Router);
    }
    canLoad() {
        const url = this.router
            .getCurrentNavigation()
            ?.extractedUrl.toString()
            .substring(1) ?? '';
        return checkAuth(url, this.configurationService, this.authStateService, this.autoLoginService, this.loginService);
    }
    canActivate(route, state) {
        const authOptions = route?.data
            ? { customParams: route.data }
            : undefined;
        return checkAuth(state.url, this.configurationService, this.authStateService, this.autoLoginService, this.loginService, authOptions);
    }
    canActivateChild(route, state) {
        const authOptions = route?.data
            ? { customParams: route.data }
            : undefined;
        return checkAuth(state.url, this.configurationService, this.authStateService, this.autoLoginService, this.loginService, authOptions);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: AutoLoginPartialRoutesGuard, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: AutoLoginPartialRoutesGuard, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: AutoLoginPartialRoutesGuard, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
export function autoLoginPartialRoutesGuard(route, state, configId) {
    const configurationService = inject(ConfigurationService);
    const authStateService = inject(AuthStateService);
    const loginService = inject(LoginService);
    const autoLoginService = inject(AutoLoginService);
    const router = inject(Router);
    const authOptions = route?.data
        ? { customParams: route.data }
        : undefined;
    const url = router.getCurrentNavigation()?.extractedUrl.toString().substring(1) ?? '';
    return checkAuth(url, configurationService, authStateService, autoLoginService, loginService, authOptions, configId);
}
export function autoLoginPartialRoutesGuardWithConfig(configId) {
    return (route, state) => autoLoginPartialRoutesGuard(route, state, configId);
}
function checkAuth(url, configurationService, authStateService, autoLoginService, loginService, authOptions, configId) {
    return configurationService.getOpenIDConfiguration(configId).pipe(map((configuration) => {
        const isAuthenticated = authStateService.areAuthStorageTokensValid(configuration);
        if (isAuthenticated) {
            autoLoginService.checkSavedRedirectRouteAndNavigate(configuration);
        }
        if (!isAuthenticated) {
            autoLoginService.saveRedirectRoute(configuration, url);
            if (authOptions) {
                loginService.login(configuration, authOptions);
            }
            else {
                loginService.login(configuration);
            }
        }
        return isAuthenticated;
    }));
}
//# sourceMappingURL=data:application/json;base64,