import { DOCUMENT } from '@angular/common';
import { Injectable, inject } from '@angular/core';
import { of, throwError } from 'rxjs';
import { catchError, switchMap, tap } from 'rxjs/operators';
import { AuthStateService } from '../../auth-state/auth-state.service';
import { LoggerService } from '../../logging/logger.service';
import { StoragePersistenceService } from '../../storage/storage-persistence.service';
import { ValidationResult } from '../../validation/validation-result';
import { FlowsDataService } from '../flows-data.service';
import { ResetAuthDataService } from '../reset-auth-data.service';
import { SigninKeyDataService } from '../signin-key-data.service';
import * as i0 from "@angular/core";
const JWT_KEYS = 'jwtKeys';
export class HistoryJwtKeysCallbackHandlerService {
    constructor() {
        this.loggerService = inject(LoggerService);
        this.authStateService = inject(AuthStateService);
        this.flowsDataService = inject(FlowsDataService);
        this.signInKeyDataService = inject(SigninKeyDataService);
        this.storagePersistenceService = inject(StoragePersistenceService);
        this.resetAuthDataService = inject(ResetAuthDataService);
        this.document = inject(DOCUMENT);
    }
    // STEP 3 Code Flow, STEP 2 Implicit Flow, STEP 3 Refresh Token
    callbackHistoryAndResetJwtKeys(callbackContext, config, allConfigs) {
        let toWrite = { ...callbackContext.authResult };
        if (!this.responseHasIdToken(callbackContext)) {
            const existingIdToken = this.storagePersistenceService.getIdToken(config);
            toWrite = {
                ...toWrite,
                id_token: existingIdToken,
            };
        }
        this.storagePersistenceService.write('authnResult', toWrite, config);
        if (config.allowUnsafeReuseRefreshToken &&
            callbackContext.authResult?.refresh_token) {
            this.storagePersistenceService.write('reusable_refresh_token', callbackContext.authResult.refresh_token, config);
        }
        if (this.historyCleanUpTurnedOn(config) &&
            !callbackContext.isRenewProcess) {
            this.resetBrowserHistory();
        }
        else {
            this.loggerService.logDebug(config, 'history clean up inactive');
        }
        if (callbackContext.authResult?.error) {
            const errorMessage = `AuthCallback AuthResult came with error: ${callbackContext.authResult.error}`;
            this.loggerService.logDebug(config, errorMessage);
            this.resetAuthDataService.resetAuthorizationData(config, allConfigs);
            this.flowsDataService.setNonce('', config);
            this.handleResultErrorFromCallback(callbackContext.authResult, callbackContext.isRenewProcess);
            return throwError(() => new Error(errorMessage));
        }
        this.loggerService.logDebug(config, `AuthResult '${JSON.stringify(callbackContext.authResult, null, 2)}'.
      AuthCallback created, begin token validation`);
        return this.signInKeyDataService.getSigningKeys(config).pipe(tap((jwtKeys) => this.storeSigningKeys(jwtKeys, config)), catchError((err) => {
            // fallback: try to load jwtKeys from storage
            const storedJwtKeys = this.readSigningKeys(config);
            if (!!storedJwtKeys) {
                this.loggerService.logWarning(config, `Failed to retrieve signing keys, fallback to stored keys`);
                return of(storedJwtKeys);
            }
            return throwError(() => new Error(err));
        }), switchMap((jwtKeys) => {
            if (jwtKeys) {
                callbackContext.jwtKeys = jwtKeys;
                return of(callbackContext);
            }
            const errorMessage = `Failed to retrieve signing key`;
            this.loggerService.logWarning(config, errorMessage);
            return throwError(() => new Error(errorMessage));
        }), catchError((err) => {
            const errorMessage = `Failed to retrieve signing key with error: ${err}`;
            this.loggerService.logWarning(config, errorMessage);
            return throwError(() => new Error(errorMessage));
        }));
    }
    responseHasIdToken(callbackContext) {
        return !!callbackContext?.authResult?.id_token;
    }
    handleResultErrorFromCallback(result, isRenewProcess) {
        let validationResult = ValidationResult.SecureTokenServerError;
        if (result &&
            typeof result === 'object' &&
            'error' in result &&
            result.error === 'login_required') {
            validationResult = ValidationResult.LoginRequired;
        }
        this.authStateService.updateAndPublishAuthState({
            isAuthenticated: false,
            validationResult,
            isRenewProcess,
        });
    }
    historyCleanUpTurnedOn(config) {
        const { historyCleanupOff } = config;
        return !historyCleanupOff;
    }
    resetBrowserHistory() {
        this.document.defaultView?.history.replaceState({}, this.document.title, this.document.defaultView.location.origin +
            this.document.defaultView.location.pathname);
    }
    storeSigningKeys(jwtKeys, config) {
        this.storagePersistenceService.write(JWT_KEYS, jwtKeys, config);
    }
    readSigningKeys(config) {
        return this.storagePersistenceService.read(JWT_KEYS, config);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: HistoryJwtKeysCallbackHandlerService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: HistoryJwtKeysCallbackHandlerService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: HistoryJwtKeysCallbackHandlerService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
//# sourceMappingURL=data:application/json;base64,