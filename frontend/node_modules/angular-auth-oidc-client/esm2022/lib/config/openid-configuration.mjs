export {};
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"openid-configuration.js","sourceRoot":"","sources":["../../../../../projects/angular-auth-oidc-client/src/lib/config/openid-configuration.ts"],"names":[],"mappings":"","sourcesContent":["import { LogLevel } from '../logging/log-level';\r\nimport { AuthWellKnownEndpoints } from './auth-well-known/auth-well-known-endpoints';\r\n\r\nexport interface OpenIdConfiguration {\r\n  /**\r\n   * To identify a configuration the `configId` parameter was introduced.\r\n   * If you do not explicitly set this value, the library will generate\r\n   * and assign the value for you. If set, the configured value is used.\r\n   * The value is optional.\r\n   */\r\n  configId?: string;\r\n  /**\r\n   * The url to the Security Token Service (STS). The authority issues tokens.\r\n   * This field is required.\r\n   */\r\n  authority?: string;\r\n  /** Override the default Security Token Service wellknown endpoint postfix. */\r\n  authWellknownEndpointUrl?: string;\r\n  authWellknownEndpoints?: AuthWellKnownEndpoints;\r\n\r\n  /**\r\n   * Override the default Security Token Service wellknown endpoint postfix.\r\n   *\r\n   * @default /.well-known/openid-configuration\r\n   */\r\n  authWellknownUrlSuffix?: string;\r\n\r\n  /** The redirect URL defined on the Security Token Service. */\r\n  redirectUrl?: string;\r\n  /**\r\n   * Whether to check if current URL matches the redirect URI when determining\r\n   * if current URL is in fact the redirect URI.\r\n   * Default: true\r\n   */\r\n  checkRedirectUrlWhenCheckingIfIsCallback?: boolean;\r\n  /**\r\n   * The Client MUST validate that the aud (audience) Claim contains its `client_id` value\r\n   * registered at the Issuer identified by the iss (issuer) Claim as an audience.\r\n   * The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience,\r\n   * or if it contains additional audiences not trusted by the Client.\r\n   */\r\n  clientId?: string;\r\n  /**\r\n   * `code`, `id_token token` or `id_token`.\r\n   * Name of the flow which can be configured.\r\n   * You must use the `id_token token` flow, if you want to access an API\r\n   * or get user data from the server. The `access_token` is required for this,\r\n   * and only returned with this flow.\r\n   */\r\n  responseType?: string;\r\n  /**\r\n   * List of scopes which are requested from the server from this client.\r\n   * This must match the Security Token Service configuration for the client you use.\r\n   * The `openid` scope is required. The `offline_access` scope can be requested when using refresh tokens\r\n   * but this is optional and some Security Token Service do not support this or recommend not requesting this even when using\r\n   * refresh tokens in the browser.\r\n   */\r\n  scope?: string;\r\n  /**\r\n   * Optional hd parameter for Google Auth with particular G Suite domain,\r\n   * see https://developers.google.com/identity/protocols/OpenIDConnect#hd-param\r\n   */\r\n  hdParam?: string;\r\n  /** URL to redirect to after a server logout if using the end session API. */\r\n  postLogoutRedirectUri?: string;\r\n  /**\tStarts the OpenID session management for this client. */\r\n  startCheckSession?: boolean;\r\n  /** Renews the client tokens, once the id_token expires. Can use iframes or refresh tokens. */\r\n  silentRenew?: boolean;\r\n  /** An optional URL to handle silent renew callbacks */\r\n  silentRenewUrl?: string;\r\n  /**\r\n   * Sets the maximum waiting time for silent renew process. If this time is exceeded, the silent renew state will\r\n   * be reset. Default = 20.\r\n   * */\r\n  silentRenewTimeoutInSeconds?: number;\r\n  /**\r\n   * Makes it possible to add an offset to the silent renew check in seconds.\r\n   * By entering a value, you can renew the tokens before the tokens expire.\r\n   */\r\n  renewTimeBeforeTokenExpiresInSeconds?: number;\r\n  /**\r\n   * Allows for a custom domain to be used with Auth0.\r\n   * With this flag set the 'authority' does not have to end with\r\n   * 'auth0.com' to trigger the auth0 special handling of logouts.\r\n   */\r\n  useCustomAuth0Domain?: boolean;\r\n  /**\r\n   * When set to true, refresh tokens are used to renew the user session.\r\n   * When set to false, standard silent renew is used.\r\n   * Default value is false.\r\n   */\r\n  useRefreshToken?: boolean;\r\n  /**\r\n   * Activates Pushed Authorisation Requests for login and popup login.\r\n   * Not compatible with iframe renew.\r\n   */\r\n  usePushedAuthorisationRequests?: boolean;\r\n  /**\r\n   * A token obtained by using a refresh token normally doesn't contain a nonce value.\r\n   * The library checks it is not there. However, some OIDC endpoint implementations do send one.\r\n   * Setting `ignoreNonceAfterRefresh` to `true` disables the check if a nonce is present.\r\n   * Please note that the nonce value, if present, will not be verified. Default is `false`.\r\n   */\r\n  ignoreNonceAfterRefresh?: boolean;\r\n  /**\r\n   * The default Angular route which is used after a successful login, if not using the\r\n   * `triggerAuthorizationResultEvent`\r\n   */\r\n  postLoginRoute?: string;\r\n  /** Route to redirect to if the server returns a 403 error. This has to be an Angular route. HTTP 403. */\r\n  forbiddenRoute?: string;\r\n  /** Route to redirect to if the server returns a 401 error. This has to be an Angular route. HTTP 401. */\r\n  unauthorizedRoute?: string;\r\n  /** When set to true, the library automatically gets user info after authentication */\r\n  autoUserInfo?: boolean;\r\n  /** When set to true, the library automatically gets user info after token renew */\r\n  renewUserInfoAfterTokenRenew?: boolean;\r\n  /** Used for custom state logic handling. The state is not automatically reset when set to false */\r\n  autoCleanStateAfterAuthentication?: boolean;\r\n  /**\r\n   * This can be set to true which emits an event instead of an Angular route change.\r\n   * Instead of forcing the application consuming this library to automatically redirect to one of the 3\r\n   * hard-configured routes (start, unauthorized, forbidden), this modification will add an extra\r\n   * configuration option to override such behavior and trigger an event that will allow to subscribe to\r\n   * it and let the application perform other actions. This would be useful to allow the application to\r\n   * save an initial return URL so that the user is redirected to it after a successful login on the Security Token Service\r\n   * (i.e. saving the return URL previously on sessionStorage and then retrieving it during the triggering of the event).\r\n   */\r\n  triggerAuthorizationResultEvent?: boolean;\r\n  /** 0, 1, 2 can be used to set the log level displayed in the console. */\r\n  logLevel?: LogLevel;\r\n  /** Make it possible to turn off the iss validation per configuration. **You should not turn this off!** */\r\n  issValidationOff?: boolean;\r\n  /**\r\n   * If this is active, the history is not cleaned up on an authorize callback.\r\n   * This can be used when the application needs to preserve the history.\r\n   */\r\n  historyCleanupOff?: boolean;\r\n  /**\r\n   * Amount of offset allowed between the server creating the token and the client app receiving the id_token.\r\n   * The diff in time between the server time and client time is also important in validating this value.\r\n   * All times are in UTC.\r\n   */\r\n  maxIdTokenIatOffsetAllowedInSeconds?: number;\r\n  /**\r\n   * This allows the application to disable the iat offset validation check.\r\n   * The iat Claim can be used to reject tokens that were issued too far away from the current time,\r\n   * limiting the amount of time that nonces need to be stored to prevent attacks.\r\n   * The acceptable range is client specific.\r\n   */\r\n  disableIatOffsetValidation?: boolean;\r\n\r\n  /** Extra parameters to add to the authorization URL request */\r\n  customParamsAuthRequest?: { [key: string]: string | number | boolean };\r\n\r\n  /** Extra parameters to add to the refresh token request body */\r\n  customParamsRefreshTokenRequest?: {\r\n    [key: string]: string | number | boolean;\r\n  };\r\n\r\n  /** Extra parameters to add to the authorization EndSession request */\r\n  customParamsEndSessionRequest?: { [key: string]: string | number | boolean };\r\n\r\n  /** Extra parameters to add to the token URL request */\r\n  customParamsCodeRequest?: { [key: string]: string | number | boolean };\r\n\r\n  // Azure B2C have implemented this incorrectly. Add support for to disable this until fixed.\r\n  /** Disables the auth_time validation for id_tokens in a refresh due to Azure's incorrect implementation. */\r\n  disableRefreshIdTokenAuthTimeValidation?: boolean;\r\n\r\n  /**\r\n   * Enables the id_token validation, default value is `true`.\r\n   * You can disable this validation if you like to ignore the expired value in the renew process or not check this in the expiry check. Only the access token is used to trigger a renew.\r\n   * If no id_token is returned in using refresh tokens, set this to `false`.\r\n   */\r\n  triggerRefreshWhenIdTokenExpired?: boolean;\r\n\r\n  /** Controls the periodic check time interval in sections.\r\n   * Default value is 3.\r\n   */\r\n  tokenRefreshInSeconds?: number;\r\n  /**\r\n   * Array of secure URLs on which the token should be sent if the interceptor is added to the `HTTP_INTERCEPTORS`.\r\n   */\r\n  secureRoutes?: string[];\r\n  /**\r\n   * Controls the periodic retry time interval for retrieving new tokens in seconds.\r\n   * `silentRenewTimeoutInSeconds` and `tokenRefreshInSeconds` are upper bounds for this value.\r\n   * Default value is 3\r\n   */\r\n  refreshTokenRetryInSeconds?: number;\r\n  /** Adds the ngsw-bypass param to all requests */\r\n  ngswBypass?: boolean;\r\n  /** Allow refresh token reuse (refresh without rotation), default value is false.\r\n   * The refresh token rotation is optional (rfc6749) but is more safe and hence encouraged.\r\n   */\r\n  allowUnsafeReuseRefreshToken?: boolean;\r\n  /** Disable validation for id_token\r\n   *  This is not recommended! You should always validate the id_token if returned.\r\n   */\r\n  disableIdTokenValidation?: boolean;\r\n  /** Disables PKCE support.\r\n   * Authorize request will be sent without code challenge.\r\n   */\r\n  disablePkce?: boolean;\r\n  /**\r\n   * Disable cleaning up the popup when receiving invalid messages\r\n   */\r\n  disableCleaningPopupOnInvalidMessage?: boolean\r\n}\r\n"]}