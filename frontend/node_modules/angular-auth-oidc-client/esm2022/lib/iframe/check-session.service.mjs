import { DOCUMENT } from '@angular/common';
import { Injectable, NgZone, inject } from '@angular/core';
import { BehaviorSubject, Observable, of } from 'rxjs';
import { take } from 'rxjs/operators';
import { LoggerService } from '../logging/logger.service';
import { EventTypes } from '../public-events/event-types';
import { PublicEventsService } from '../public-events/public-events.service';
import { StoragePersistenceService } from '../storage/storage-persistence.service';
import { IFrameService } from './existing-iframe.service';
import * as i0 from "@angular/core";
const IFRAME_FOR_CHECK_SESSION_IDENTIFIER = 'myiFrameForCheckSession';
// http://openid.net/specs/openid-connect-session-1_0-ID4.html
export class CheckSessionService {
    constructor() {
        this.loggerService = inject(LoggerService);
        this.storagePersistenceService = inject(StoragePersistenceService);
        this.iFrameService = inject(IFrameService);
        this.eventService = inject(PublicEventsService);
        this.zone = inject(NgZone);
        this.document = inject(DOCUMENT);
        this.checkSessionReceived = false;
        this.scheduledHeartBeatRunning = null;
        this.lastIFrameRefresh = 0;
        this.outstandingMessages = 0;
        this.heartBeatInterval = 3000;
        this.iframeRefreshInterval = 60000;
        this.checkSessionChangedInternal$ = new BehaviorSubject(false);
    }
    get checkSessionChanged$() {
        return this.checkSessionChangedInternal$.asObservable();
    }
    ngOnDestroy() {
        this.stop();
        const windowAsDefaultView = this.document.defaultView;
        if (windowAsDefaultView && this.iframeMessageEventListener) {
            windowAsDefaultView.removeEventListener('message', this.iframeMessageEventListener, false);
        }
    }
    isCheckSessionConfigured(configuration) {
        const { startCheckSession } = configuration;
        return Boolean(startCheckSession);
    }
    start(configuration) {
        if (!!this.scheduledHeartBeatRunning) {
            return;
        }
        const { clientId } = configuration;
        this.pollServerSession(clientId, configuration);
    }
    stop() {
        if (!this.scheduledHeartBeatRunning) {
            return;
        }
        this.clearScheduledHeartBeat();
        this.checkSessionReceived = false;
    }
    serverStateChanged(configuration) {
        const { startCheckSession } = configuration;
        return Boolean(startCheckSession) && this.checkSessionReceived;
    }
    getExistingIframe() {
        return this.iFrameService.getExistingIFrame(IFRAME_FOR_CHECK_SESSION_IDENTIFIER);
    }
    init(configuration) {
        if (this.lastIFrameRefresh + this.iframeRefreshInterval > Date.now()) {
            return of(undefined);
        }
        const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', configuration);
        if (!authWellKnownEndPoints) {
            this.loggerService.logWarning(configuration, 'CheckSession - init check session: authWellKnownEndpoints is undefined. Returning.');
            return of();
        }
        const existingIframe = this.getOrCreateIframe(configuration);
        // https://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-EventTarget-addEventListener
        // If multiple identical EventListeners are registered on the same EventTarget with the same parameters the duplicate instances are discarded. They do not cause the EventListener to be called twice and since they are discarded they do not need to be removed with the removeEventListener method.
        // this is done even if iframe exists for HMR to work, since iframe exists on service init
        this.bindMessageEventToIframe(configuration);
        const checkSessionIframe = authWellKnownEndPoints.checkSessionIframe;
        const contentWindow = existingIframe.contentWindow;
        if (!checkSessionIframe) {
            this.loggerService.logWarning(configuration, 'CheckSession - init check session: checkSessionIframe is not configured to run');
        }
        if (!contentWindow) {
            this.loggerService.logWarning(configuration, 'CheckSession - init check session: IFrame contentWindow does not exist');
        }
        else {
            contentWindow.location.replace(checkSessionIframe);
        }
        return new Observable((observer) => {
            existingIframe.onload = () => {
                this.lastIFrameRefresh = Date.now();
                observer.next();
                observer.complete();
            };
        });
    }
    pollServerSession(clientId, configuration) {
        this.outstandingMessages = 0;
        const pollServerSessionRecur = () => {
            this.init(configuration)
                .pipe(take(1))
                .subscribe(() => {
                const existingIframe = this.getExistingIframe();
                if (existingIframe && clientId) {
                    this.loggerService.logDebug(configuration, `CheckSession - clientId : '${clientId}' - existingIframe: '${existingIframe}'`);
                    const sessionState = this.storagePersistenceService.read('session_state', configuration);
                    const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', configuration);
                    const contentWindow = existingIframe.contentWindow;
                    if (sessionState &&
                        authWellKnownEndPoints?.checkSessionIframe &&
                        contentWindow) {
                        const iframeOrigin = new URL(authWellKnownEndPoints.checkSessionIframe)?.origin;
                        this.outstandingMessages++;
                        contentWindow.postMessage(clientId + ' ' + sessionState, iframeOrigin);
                    }
                    else {
                        this.loggerService.logDebug(configuration, `CheckSession - session_state is '${sessionState}' - AuthWellKnownEndPoints is '${JSON.stringify(authWellKnownEndPoints, null, 2)}'`);
                        this.checkSessionChangedInternal$.next(true);
                    }
                }
                else {
                    this.loggerService.logWarning(configuration, `CheckSession - OidcSecurityCheckSession pollServerSession checkSession IFrame does not exist:
               clientId : '${clientId}' - existingIframe: '${existingIframe}'`);
                }
                // after sending three messages with no response, fail.
                if (this.outstandingMessages > 3) {
                    this.loggerService.logError(configuration, `CheckSession - OidcSecurityCheckSession not receiving check session response messages.
                            Outstanding messages: '${this.outstandingMessages}'. Server unreachable?`);
                }
                this.zone.runOutsideAngular(() => {
                    this.scheduledHeartBeatRunning =
                        this.document?.defaultView?.setTimeout(() => this.zone.run(pollServerSessionRecur), this.heartBeatInterval) ?? null;
                });
            });
        };
        pollServerSessionRecur();
    }
    clearScheduledHeartBeat() {
        if (this.scheduledHeartBeatRunning !== null) {
            clearTimeout(this.scheduledHeartBeatRunning);
            this.scheduledHeartBeatRunning = null;
        }
    }
    messageHandler(configuration, e) {
        const existingIFrame = this.getExistingIframe();
        const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', configuration);
        const startsWith = !!authWellKnownEndPoints?.checkSessionIframe?.startsWith(e.origin);
        this.outstandingMessages = 0;
        if (existingIFrame &&
            startsWith &&
            e.source === existingIFrame.contentWindow) {
            if (e.data === 'error') {
                this.loggerService.logWarning(configuration, 'CheckSession - error from check session messageHandler');
            }
            else if (e.data === 'changed') {
                this.loggerService.logDebug(configuration, `CheckSession - ${e} from check session messageHandler`);
                this.checkSessionReceived = true;
                this.eventService.fireEvent(EventTypes.CheckSessionReceived, e.data);
                this.checkSessionChangedInternal$.next(true);
            }
            else {
                this.eventService.fireEvent(EventTypes.CheckSessionReceived, e.data);
                this.loggerService.logDebug(configuration, `CheckSession - ${e.data} from check session messageHandler`);
            }
        }
    }
    bindMessageEventToIframe(configuration) {
        this.iframeMessageEventListener = this.messageHandler.bind(this, configuration);
        const defaultView = this.document.defaultView;
        if (defaultView) {
            defaultView.addEventListener('message', this.iframeMessageEventListener, false);
        }
    }
    getOrCreateIframe(configuration) {
        return (this.getExistingIframe() ||
            this.iFrameService.addIFrameToWindowBody(IFRAME_FOR_CHECK_SESSION_IDENTIFIER, configuration));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: CheckSessionService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: CheckSessionService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: CheckSessionService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
//# sourceMappingURL=data:application/json;base64,